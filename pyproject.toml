[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-global-signal-grid"
version = "0.1.0"
description = "AI-GlobalSignalGrid - Multi-agent geopolitical intelligence gathering platform"
authors = [
    {name = "MASX AI Team", email = "ab@masxai.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core AI/ML Framework
    "langgraph>=0.2.0",
    "langchain>=0.2.0",
    "langchain-openai>=0.1.0",
    "langchain-community>=0.2.0",
    "openai>=1.50.0",
    "tiktoken>=0.6.0",
    
    # Multi-agent frameworks
    "crewai>=0.50.0",
    "autogen>=0.9.5",
    
    # Web framework and API
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",
    
    # Database and vector storage
    "supabase>=2.3.0",
    "psycopg2-binary>=2.9.9",
    "pgvector>=0.2.4",
    
    # Data processing and NLP
    "spacy>=3.7.0",
    "transformers>=4.37.0",
    "torch>=2.2.0",
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    
    # News and data fetching
    "feedparser>=6.0.10",
    "newspaper3k>=0.2.8",
    "requests>=2.32.0",
    "aiohttp>=3.9.0",
    "gdeltdoc>=0.1.0",
    
    # Translation and language processing
    "deep-translator>=1.11.0",
    "langdetect>=1.0.9",
    "pycountry>=23.12.0",
    "country-converter>=1.0.0",
    "langcodes>=3.3.0",
    
    # Text processing and similarity
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.23.0",
    "rapidfuzz>=3.6.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "tenacity>=8.2.0",
    "httpx>=0.27.0",
    "pydantic-extra-types>=2.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=24.1.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
    "ipython>=8.20.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "responses>=0.24.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

[project.scripts]
masx-orchestrator = "src.app.workflows.orchestrator:main"
masx-api = "src.app.api.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "langchain.*",
    "crewai.*",
    "autogen.*",
    "spacy.*",
    "transformers.*",
    "torch.*",
    "newspaper3k.*",
    "feedparser.*",
    "gdeltdoc.*",
    "deep_translator.*",
    "langdetect.*",
    "pycountry.*",
    "country_converter.*",
    "langcodes.*",
    "fuzzywuzzy.*",
    "rapidfuzz.*",
    "structlog.*",
    "tenacity.*",
    "httpx.*",
    "pydantic_extra_types.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 